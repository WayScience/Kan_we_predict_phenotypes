#!/usr/bin/env python
# coding: utf-8

# # Module 0: Data Download
#
# In this notebook, we will download two datasets generated by the [MitoCheck Consortium](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3108885/).
#
# Below is a summarized description of the dataset. For more details, please visit [this link](https://zenodo.org/records/7967386):
#
# This dataset contains supplementary files from the mitocheck_data repository, focusing on extracted and normalized single-cell features that were too large to upload to GitHub [repo](https://github.com/WayScience/mitocheck_data).
#
# The data includes nuclei features from various cell subsets:
#
# - **Negative Control**: Features from cells transfected with scrambled siRNA.
# - **Positive Control**: Features from cells transfected with siRNA targeting mitosis-related genes.
# - **Training Data**: Features from cells manually labeled with phenotypic classes by the MitoCheck Consortium.
#
# Additionally, the dataset includes:
#
# - **IDR Stream Extracted Features**: Single-cell features extracted using CellProfiler and DeepProfiler.
# - **Normalized Data**: Features normalized using a StandardScaler derived from negative control data.
#
# The data relates to the MitoCheck Consortium's original screen, hosted on the Image Data Resource (IDR) under accession [idr0013](https://idr.openmicroscopy.org/webclient/?show=screen-1101) (screenA).

# In[1]:


import pathlib
import zipfile

import requests

# ## Helper functions
#
# Funtions that are used in this notebook for downloading the dataset.

# In[2]:


def download_and_extract(url: str, extract_to: str | pathlib.Path):
    """Downloads a ZIP file from a specified URL, extracts its contents to a given directory,
    and removes the ZIP file after extraction.

    Parameters
    ----------
    url : str
        The URL of the ZIP file to download.
    extract_to : str or pathlib.Path
        The directory where the contents of the ZIP file will be extracted.
        If the directory does not exist, it will be created.

    Raises
    ------
    requests.exceptions.HTTPError
        If the download request fails due to an unsuccessful status code.
    zipfile.BadZipFile
        If the downloaded file is not a valid ZIP file.
    OSError
        If the extraction or file deletion fails due to a system-related issue.

    Examples
    --------
    Download and extract a ZIP file to the specified directory:
    """

    # Download the file
    local_filename = url.split("/")[-1].split("?")[0]
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    # Unzip the file
    with zipfile.ZipFile(local_filename, "r") as zip_ref:
        zip_ref.extractall(extract_to)

    # Clean up by removing the zip file after extraction
    pathlib.Path(local_filename).unlink()


# ## Downloading MitoCheck data
#
# The following code downloads both the extracted features and normalized single-cell image-based profiles generated by the MitoCheck Consortium.

# In[3]:


# creating data folder
data_dir = pathlib.Path("../data").resolve()

# URLs for downloading mitocheck data
extracted_feats_url = "https://zenodo.org/records/7967386/files/1.idr_streams__extracted_features.zip?download=1"
normalized_feats_url = "https://zenodo.org/records/7967386/files/3.normalize_data__normalized_data.zip?download=1"


# In[4]:


# Download and extract files
download_and_extract(extracted_feats_url, data_dir)
download_and_extract(normalized_feats_url, data_dir)
